hol-cmdlets Function Reference/Documentation - December 14, 2015

There are currently two main Powershell modules containing the functions we have created for managing Hands-on Labs templates: hol-cmdlets and hol-daemons. The former contains the core HOL management cmdlets while the latter contains the functions specific to running the HOL daemons. This is a complete list of the functions as of December 4, 2015: version 1.5.0 (hol-cmdlets) and version 1.6.0 (hol-daemons).

These functions have been broken down into basic categories for easier management. Note that some of the functions are utility functions that are rarely used on their own, but may be called by other functions within the environment.


*** OVF ***

Function Test-Ovf
	Tests whether all files referenced in an OVF exist on disk
	Takes full path to OVF, assumes referenced files are in same directory
	Returns True or False

	PARAM(
		$OVF = path to OVF file
	)

Function Get-OvfMap
	Feed it an OVF and it will spit out the mapping of VMDK-to-VM within the vPod
	PARAM(
		$OVF = path to OVF file
	)

Function Test-OvfDisk
	Pass an OVF and it will report on the OVF rounding issue (KB 2094271)

.EXAMPLE
	Test-OvfDisk -OVF 'E:\HOL-Library\MyPod\MyPod.ovf'
.EXAMPLE
	Test-OvfDisk -OVF 'E:\HOL-Library\MyPod\MyPod.ovf' -DebugMe
.EXAMPLE
	Get-ChildItem E:\HOL-Library -Recurse -Filter '*.ovf' | Test-OvfDisk

	PARAM(
		[Parameter(Position=0,Mandatory=$true,HelpMessage="Path to the OVF",
		ValueFromPipeline=$true)]
		$OVF,
		[Switch]$DebugMe
	)

Function Set-CleanOvf
	* Look for blank but required ovf password parameters, set them to "VMware1!"
	* Look for and remove "stuck" NAT rules
	* Look for CustomizeOnInstantiate flag set and unset
	* Look for VMs with "POOL" addresses and change to "DHCP"
	
	* 2015 Update: generate and replace OVF's checksum in Manifest
	* Correct VMDK sizes specified in MB, but are smaller than data population

	PARAM(
		$LibraryPath = Path to vPod library. Will be read recursively for *.OVF files
	)

Function Get-VmdkHashes
	Create a list of SHA1 hashes for the VMDKs at a given path
	Write the list to vpodName-<SITENAME>.hash at the root of the VPODPATH
	...And compare against values in Manifest (victim of scope creep)
	HashAlgorithm defaults to SHA1, which is used by ovftool in the Manifest file
	Requires Powershell 4.0 or higher

	PARAM(
		$VpodPath = Path to vPod (the parent directory),
		$SiteName = name of “site” where run. Default = 'LOCAL',
		$HashAlgorithm = 'SHA1' # could also be MD5, SHA1, SHA256, SHA384, SHA512
	)


*** Shadow ***
Function Add-CIVAppShadows
	Takes a list of vAppTemplates and a list of OrgVDCs
	Provisions one copy of a vApp on each OrgVdc simultaneously (asynchronously)
	Named <vAppName>_shadow_<OrgvdcName>
	with 5 hour storage and Runtime leases so vCD clean them up if you forget
	
	Waits for the last of the vApps to finish deploying before moving to the next template

	.EXAMPLE
	$vApps = @()
	$vAppNames | % { $vApps += (Get-CIVAppTemplate $_ -Catalog MY_CATALOG) } 
	$orgVDCs = @()
	$orgVdcNames | % { $orgVDCs += (Get-OrgVDC $_) }
	Add-CIVAppShadows -o $orgVdcs -v $vApps

	PARAM (
		$vApps = $(throw "need -vApps"), 
		$OrgVDCs = $(throw "need -OrgVdcs"),
		$SleepTime = 120,
		[Switch]$DebugMe
	)
	
Function Add-CIVAppShadowsWait
	Wait for a single template to be "Resolved" then kick off shadows
	Quick and dirty... no error checking.. can go infinite if the import fails

	PARAM (
		$vApp = $(throw "need -vApps"), 
		$OrgVDCs = $(throw "need -OrgVdcs"),
		$SleepTime = 300
	)


*** VCD Media ***

Function Publish-VCDMediaDirectory
	Upload a directory of ISOs to a vCD catalog
	WARNINGS:
		* vCD periodically fails this for unknown reasons
		* not tested very much

	PARAM(
		$Catalog = $(throw "need -Catalog"),
		$OrgVdc = $(throw "need -OrgVdc"),
		$LibraryPath = $(throw "need -LibraryPath (folder containing ISOs)")
	)

Function Import-VcdMedia
	Takes an ISO Name, Catalog, "cloud key", and a path to the local Media Library
	Imports the ISO( or OVA) located at <library>\ISONAME.<TYPE>
	Will attempt to resume until successful completion (or 20x)

	PARAM (
		$Key = $(throw "need -Key"),
		$Catalog = "",
		$MediaName = $(throw "need -MediaName"), 
		$MediaType = 'iso',
		$LibPath = $(throw "need -LibPath"),
		$User = $DEFAULT_CLOUDUSER,
		$Password = $DEFAULT_CLOUDPASSWORD,
		$OvDC = "",
		$Options = ""
	)


*** VCD Metadata ***

Function Get-CIMetaData
	.SYNOPSIS 
		Retrieves all Metadata Key/Value pairs. 
	.DESCRIPTION 
		Retrieves all custom Metadata Key/Value pairs on a specified vCloud object 
		Updated 6-Mar-2014 by Doug Baer to support vCD 5.1 Metadata
	.PARAMETER	CIObject 
		The object on which to retrieve the Metadata. 
	.PARAMETER	Key 
		The key to retrieve. 
	.EXAMPLE 
		PS C:\> Get-CIMetadata -CIObject (Get-Org Org1) 

	PARAM( 
		[parameter(Mandatory=$true,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)] 
			[PSObject[]]$CIObject, 
			$Key 
		)

Function New-CIMetaData
	.SYNOPSIS 
		Creates a Metadata Key/Value pair. 
	.DESCRIPTION 
		Creates a custom Metadata Key/Value pair on a specified vCloud object 
	.PARAMETER	Key 
		The name of the Metadata to be applied. 
	.PARAMETER	Value 
		The value of the Metadata to be applied. 
	.PARAMETER	CIObject 
		The object on which to apply the Metadata. 
	.EXAMPLE 
		PS C:\> New-CIMetadata -Key "Owner" -Value "Alan Renouf" -CIObject (Get-Org Org1) 
	.NOTE
		Setting a key in the 'SYSTEM' domain requires sysadmin access, I believe:
			$Metadata.MetadataEntry[0].Domain = New-Object VMware.VimAutomation.Cloud.Views.MetadataDomainTag
			$Metadata.MetadataEntry[0].Domain.Value = 'SYSTEM'
			$Metadata.MetadataEntry[0].Domain.Visibility = 'READONLY' or 'PRIVATE'

	PARAM( 
		[parameter(Mandatory=$true,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)] 
			[PSObject[]]$CIObject, 
			$Key, 
			$Value 
		)

Function Remove-CIMetaData
	.SYNOPSIS 
		Removes a Metadata Key/Value pair. 
	.DESCRIPTION 
		Removes a custom Metadata Key/Value pair on a specified vCloud object 
	.PARAMETER	Key 
		The name of the Metadata to be removed. 
	.PARAMETER	CIObject 
		The object on which to remove the Metadata. 
	.EXAMPLE 
		PS C:\> Remove-CIMetaData -CIObject (Get-Org Org1) -Key "Owner" 
	.NOTE
		If the key is in the 'SYSTEM' domain, you need to specify the domain: GetMetaDataValue($Key,'SYSTEM') 


	PARAM( 
		[parameter(Mandatory=$true,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)] 
			[PSObject[]]$CIObject, 
			$Key 
		)

Function Add-InternetMetadata
	### HOL-specific use case ###
	Add metadata to vApp template that VLP/NEE uses to attach it to the external network (Internet)
	Update 11/2014 to handle varying vApp network names
	Update 07/2015 to handle different orgvdc patterns: grabs first one matching *UT*
		Also handle special case for vCloud Air external network naming
	Update 08/2015 to allow specification of catalog name 

	PARAM (
		$VPodName = $(throw "need -vPodName"),
		$CatalogName = $DEFAULT_TARGETCLOUDCATALOG
	)


*** vPod I/O and Replication ***

Function Import-VPod
	Takes a vPod Name, Catalog, "cloud key", and a path to the vPod Library
	Imports the OVF located at <library>\vPodName\vPodName.ovf
	Will attempt to resume until successful completion (or 5x) -- Imports should NOT be failing
	Written for OVFTOOL 3.x ... works with 4.1.0

	PARAM (
		$Key = $cloudKey,
		$Catalog = $DEFAULT_TARGETCLOUDCATALOG,
		$VPodName = $(throw "need -VPodName"), 
		$LibPath = $DEFAULT_LOCALLIB,
		$User = $DEFAULT_CLOUDUSER,
		$Password = $DEFAULT_CLOUDPASSWORD,
		$AlternateName = '',
		$Options = '--allowExtraConfig',
		$MaxRetries = 5
	)

Function Export-VPod
Takes a vPod Name, Catalog, "cloud key", and a path to the vPod Library
   Exports the vPod to an OVF located at <library>\vPodName\vPodName.ovf
   Will attempt to resume until successful completion (or 20x)
   ALWAYS uses '--exportFlags=preserveIdentity' flag to ovftool for HOL

	PARAM (
		$Key = $cloudKey,
		$Catalog = $DEFAULT_SOURCECLOUDCATALOG,
		$VPodName = $(throw "need -VPodName"), 
		$LibPath = $DEFAULT_LOCALLIB,
		$User = $DEFAULT_CLOUDUSER,
		$Password = $DEFAULT_CLOUDPASSWORD,
		$MaxRetries = 20,
		$Options = '--exportFlags=preserveIdentity --allowExtraConfig',
		[Switch]$Print
	)

Function Start-OvfTemplatePull
.SYNOPSIS
	Efficiently synchronize two OVF exports between sites using specified local data as the seed.

.DESCRIPTION
	Handles preprocessing tasks and calls lftp and/or rsync to perform replication
	
	Requires SSH connectivity to main CATALOG/LIBRARY system to pull latest version.

.PARAMETER
	CATALOGHOST - the name of the CATALOG host containing the new version of the vPod 
		this must be resolvable via DNS or hosts file

.PARAMETER
	REMOTELIB - the path to the new files on the CATALOGHOST, not including NEWNAME

.PARAMETER
	OLDNAME - the name of the local SEED vPod 

.PARAMETER
	NEWNAME - the name of the new vPod (the version in REMOTELIB)

.PARAMETER
	LOCALSEED - the local path to the SEED files, not including OLDNAME

.PARAMETER
	LOCALLIB - the path to the local LIBRARY files, not including NEWNAME

.PARAMETER
	SSHUSER - the user account used for SSH connection to CATALOGHOST

.PARAMETER
	OUTPUTPATH - path to the log file (optional)

.EXAMPLE - using defaults
	Start-OvfTemplatePull -OldName HOL-SDC-1400-v1 -NewName HOL-SDC-1400-v2

.EXAMPLE
	Start-OvfTemplatePull -OldName HOL-SDC-1400-v1 -NewName HOL-SDC-1400-v2 -CatalogHost MAIN-CATALOG -RemoteLib /cygdrive/c/MasterLibrary	-LocalSeed C:\Seeds\ -LocalLib C:\LocalLibrary -SSHuser holuser -OutputPath C:\LabMaps

	PARAM(
		[Parameter(Position=0,Mandatory=$false,HelpMessage="Name of the catalog host",
		ValueFromPipeline=$False)]
		[System.String]$CatalogHost = $DEFAULT_CATALOGHOST,
	
		[Parameter(Position=1,Mandatory=$true,HelpMessage="Seed vApp Name (target)",
		ValueFromPipeline=$False)]
		[System.String]$OldName,
	
		[Parameter(Position=2,Mandatory=$true,HelpMessage="New vApp Name (source)",
		ValueFromPipeline=$False)]
		[System.String]$NewName,
	
		[Parameter(Position=3,Mandatory=$false,HelpMessage="SSH path to the source files (remote)",
		ValueFromPipeline=$False)]
		[System.String]$RemoteLib = $DEFAULT_REMOTELIB,
	
		[Parameter(Position=4,Mandatory=$false,HelpMessage="Path to the seed files (local)",
		ValueFromPipeline=$False)]
		[System.String]$LocalSeed = $DEFAULT_LOCALSEED,
	
		[Parameter(Position=5,Mandatory=$false,HelpMessage="Path to the library files (local)",
		ValueFromPipeline=$False)]
		[System.String]$LocalLib = $DEFAULT_LOCALLIB,
	
		[Parameter(Position=6,Mandatory=$false,HelpMessage="Path to the library files (local)",
		ValueFromPipeline=$False)]
		[System.String]$SSHuser = $DEFAULT_SSHUSER,
	
		[Parameter(Position=7,Mandatory=$false,HelpMessage="Path to output files",
		ValueFromPipeline=$False)]
		[System.String]$OutputPath = $DEFAULT_MAPOUTPUTPATH
	)


*** Reporting ***

Function Show-VpodVersions
	Query Clouds and return presence + version(s) of each one matching VpodFilter
	Assumes $LibPath is authoritative regarding which SKUs should be reported.

	*** Must be authenticated to all $Clouds prior to running this function

	PARAM (
		$Clouds = $(throw "need -Clouds (array of cloudKeys to search)"),
		$Catalog = $DEFAULT_TARGETCLOUDCATALOG,
		$LibPath = $DEFAULT_LOCALLIB,
		$VpodFilter = '*'
	)

Function Test-CIVAppTemplateCustomization
	### HOL-specific use case ###
	Limited use function for reporting purposes.
	Checks the 'CustomizeOnInstantiate' flag on a checked-in vAppTemplate or catalog full of templates
	Assumes login to ONLY one cloud

	PARAM(
		$Template="",
		$Catalog="",
		[Switch]$ShowOnlyBad
	)

Function Test-CloudCredential
FOR TESTING ONLY - Prints out decoded cloud credentials


*** Catalogs ***

Function Compare-Catalogs
	Compares vApp Templates in two specified catalogs, possibly across clouds
	This is a "source-target" relationship rather than a two-way differential

	PARAM(
		$CatalogSrcName = $(throw "need -CatalogSrcName"),
		$CloudSrcName = $(throw "need -CloudSrcName"),
		$OrgSrcName = $(throw "need -OrgSrcName"),
		$CatalogNewName = $(throw "need -CatalogNewName"),
		$CloudNewName = $(throw "need -CloudNewName"),
		$OrgNewName = $(throw "need -OrgNewName"),
		$TemplateFilter = 'HOL-*'
	)

Function Compare-CatalogToDirectory
	Compare a vCD Catalog to a directory of exports (a "Library")
	Assumes catalog is authoritative source of vApp Templates.
	Output is an array of vApp Templates that exist in the Catalog 
		but not the specified directory.

	Requires being logged in to the cloud in question.

	PARAM(
		$ServerName = $(throw "need -ServerName"),
		$OrgName = $(throw "need -OrgName"),
		$CatalogName = $(throw "need -CatalogName"),
		$LibraryPath = $DEFAULT_LOCALLIB
	)

Function Compare-DirectoryToCatalog
	Compare a directory of exports (a "Library") to a vCD catalog.
	Assumes directory is authoritative source of vApp Templates.
	Output is the names of vApp Templates that exist in the directory 
		but not the specified Catalog.

	Requires being logged in to the cloud in question.

	PARAM(
		$ServerName = $(throw "need -ServerName"),
		$OrgName = $(throw "need -OrgName"),
		$CatalogName = $(throw "need -CatalogName"),
		$LibraryPath = $DEFAULT_LOCALLIB
	)

Function Sync-DirectoryToCatalog
	Sync a directory of exports (a "Library") to a vCD catalog.
	Assumes directory is authoritative source of vApp Templates.

	Requires being logged in to the (one) cloud in question.

Function Sync-CatalogToDirectory
	Sync a vCD Catalog to a directory of exports (a "Library").
	Assumes catalog is authoritative source of vApp Templates.

	Requires being logged in to the (one) cloud in question .

	PARAM(
		$Key = $cloudKey,
		$CatalogName = '',
		$LibraryPath = $DEFAULT_LOCALLIB,
		$UserName = $DEFAULT_CLOUDUSER,
		$Password = $DEFAULT_CLOUDPASSWORD
	)


*** General Utility ***

Function SetHolPrompt
	Set the prompt to include the $cloudkey variable (used for per-session defaults)

Function Connect-Cloud
	This is a shortcut to connecting to the various clouds used in HOL
	It relies on credential objects being instantiated in $profile
	It will default to using the $cloudKey variable defined in the current session

	PARAM (
		$Key = $cloudKey
	)

Function Get-CloudInfoFromKey
	Lookup/Test module internal Cloud Info (host, org, catalog) when passed a cloudKey
	Defaults to using defaultCloudkey for the session
	Returns an array containing the three values, in that order.
	TO DO: update this to return an object with named fields (or a hash)
		also include ovdc element

	PARAM(
		$Key = $cloudKey
	)

Function Get-MountPointFreeSpace
	Reports free space information for mount points on local host; Windows sucks at this on its own.

Function Send-Email
	Send an Email via SMTP
	Note that this may not work with ehnanced SMTP "security" config
	Windows sends the actual name of the host, which Net.Mail.SmtpClient does not allow overriding

	PARAM(
		$SmtpServer = $(throw "need -SmtpServer"),
		$From = $(throw "need -From address"),
		$To = $(throw "need -To address"),
		$Subject = "",
		$Body = ""
	)

Function Test-PowerCLI
	WORK IN PROGRESS
	Check for VMware PowerCLI modules -- I care mostly about the Cloud module

Function Import-PowerCLI
	WORK IN PROGRESS
	Import PowerCLI commands (v6.0+)


*** Special - Require Sysadmin ***

Function Get-CIVMShadow
	Show all of the shadows deployed as well as their respective parents (vApp Templates, Catalogs)

Function Set-CIVAppTemplateConsolidate
.EXAMPLE 
	PS C:\> Get-CIVAppTemplate Base-ePod-Basic-v8 -Catalog (Get-Org HOLDEV | Get-Catalog HOL_BASE_CAT01) | Set-CIVAppTemplateConsolidate

	PARAM (
		[Parameter(Mandatory=$True, Position=1, ValueFromPipeline=$true)]
		[PSObject[]]$InputObject
	)


 === HOL-Daemons Module (hol-daemons.psm1) ===

Function Send-HolDaemonEmail
	Send a notification Email from an HOL Daemon
	Basically, an email with some standardized subject and body text to facilitate filtering

	PARAM(
		$To = $(throw "need -To address"),
		$Site = "UNKNOWN",
		$Subject = "",
		$Body = ""
	)

Function Rename-HolWorkingFile
	Simple function to rename the 'working file' -- a rudimentary semaphore and message passing system


	PARAM ($podName, $currentFile, $status)

Function Start-HolVpodExportDaemon
	Watch the specified working directory (Mailbox) for work to be done
	Look for files named with the vPOD name + '_READY' and begins processing
	Sends emails with status updates (Start/Finish Export, Begin/End Import, Begin/End Shadow)

	PARAM(
		$WorkingDir = $(throw "need -WorkingDir to watch"),
		$Site = 'MASTER',
		$SourceCloudKey = $DEFAULT_SOURCECLOUDKEY,
		$SourceCloudCatalog = $DEFAULT_SOURCECLOUDCATALOG,
		$TargetCloudKeys = $(),
		$TargetCloudCatalog = $DEFAULT_TARGETCLOUDCATALOG,
		$RemoteCatalogs = $(),
		$CloudUser = $DEFAULT_CLOUDUSER,
		$CloudPassword = $DEFAULT_CLOUDPASSWORD,
		$LibPath = $DEFAULT_LOCALLIB,
		$OvdcFilter = '*',
		$SshUser = $DEFAULT_SSHUSER,
		$RemoteMailboxPath = $DEFAULT_REMOTEMAILBOXPATH,
		$Filter = '*',
		$Email = $DEFAULT_EMAILSENDER,
		[Switch]$SeedOnly,
		[Switch]$ShadowCodeWorks
	)

Function Start-HolVpodImportDaemon
	Watch the specified working directory (Mailbox) for work to be done
	Look for files named with the vPOD name and begins processing
	Sends emails with status updates (Start/Finish Replication, Begin/End Import, Begin/End Shadow)
	
	Runs on the child catalog hosts to pull from parent
	
	PARAM(
		$WorkingDir = $(throw "need -WorkingDir to watch"),
		$Site = 'UNKNOWN',
		$SourceCatalogHost = $DEFAULT_CATALOGHOST,
		$TargetCloudKeys = $(),
		$TargetCloudCatalog = $DEFAULT_TARGETCLOUDCATALOG,
		$CloudUser = $DEFAULT_CLOUDUSER,
		$CloudPassword = $DEFAULT_CLOUDPASSWORD,
		$OvdcFilter = '*',
		$SshUser = $DEFAULT_SSHUSER,
		$LibPath = $DEFAULT_LOCALLIB,
		$SeedPath = $DEFAULT_LOCALSEED,
		$RemoteMailboxPath = $DEFAULT_REMOTEMAILBOXPATH,
		$VpodFilter = '*',
		$Email = $DEFAULT_EMAILSENDER,
		[Switch]$SeedOnly,
		[Switch]$ShadowCodeWorks
	)

